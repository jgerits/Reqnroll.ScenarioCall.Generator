---
name: CI/CD Pipeline

permissions:
  contents: write
  
'on':
  push:
    branches: [main, master]
    paths-ignore:
      - 'examples/**'
      - '*.md'
      - 'LICENSE'
      - '.gitignore'
      - 'CONTRIBUTING.md'
      - 'TESTING.md'
  pull_request:
    branches: [main, master]
  release:
    types: [published]

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: Build and Test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal

      - name: Create NuGet package
        run: dotnet pack --configuration Release --no-build --output ./artifacts

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ./artifacts/*.nupkg
          retention-days: 30

  auto-release:
    runs-on: ubuntu-latest
    name: Auto Release
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for relevant changes
        id: check_changes
        run: |
          # Get the list of changed files in the last commit
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
          echo "Changed files: $CHANGED_FILES"
          
          # Check if any relevant files were changed
          RELEVANT_CHANGE=false
          
          # List of patterns for files that should trigger a release
          RELEVANT_PATTERNS=(
            "^Reqnroll.ScenarioCall.Generator/.*\.cs$"
            "^Reqnroll.ScenarioCall.Generator/.*\.csproj$"
            "^Reqnroll.ScenarioCall.Generator.Tests/.*\.cs$"
            "^Reqnroll.ScenarioCall.Generator.IntegrationTests/.*\.cs$"
            "^Reqnroll.ScenarioCall.Generator.IntegrationTests.MSTest/.*\.cs$"
            "^Reqnroll.ScenarioCall.Generator.IntegrationTests.NUnit/.*\.cs$"
            "^Reqnroll.ScenarioCall.Generator/build/.*$"
            "^CHANGELOG.md$"
          )
          
          # Check each changed file against relevant patterns
          for file in $CHANGED_FILES; do
            for pattern in "${RELEVANT_PATTERNS[@]}"; do
              if echo "$file" | grep -qE "$pattern"; then
                RELEVANT_CHANGE=true
                echo "Found relevant change: $file"
                break 2
              fi
            done
          done
          
          echo "relevant=$RELEVANT_CHANGE" >> $GITHUB_OUTPUT
          
          if [ "$RELEVANT_CHANGE" = "false" ]; then
            echo "No relevant changes detected. Skipping release."
          else
            echo "Relevant changes detected. Proceeding with release."
          fi

      - name: Setup .NET
        if: steps.check_changes.outputs.relevant == 'true'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Get current version
        if: steps.check_changes.outputs.relevant == 'true'
        id: current_version
        run: |
          CURRENT_VERSION=$(grep -o '<Version>[^<]*</Version>' Reqnroll.ScenarioCall.Generator/Reqnroll.ScenarioCall.Generator.csproj | sed 's/<Version>\(.*\)<\/Version>/\1/')
          echo "Current version: $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Increment patch version
        if: steps.check_changes.outputs.relevant == 'true'
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in project file
        if: steps.check_changes.outputs.relevant == 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          sed -i "s|<Version>[^<]*</Version>|<Version>$NEW_VERSION</Version>|g" Reqnroll.ScenarioCall.Generator/Reqnroll.ScenarioCall.Generator.csproj
          sed -i "s|<AssemblyVersion>[^<]*</AssemblyVersion>|<AssemblyVersion>$NEW_VERSION</AssemblyVersion>|g" Reqnroll.ScenarioCall.Generator/Reqnroll.ScenarioCall.Generator.csproj
          sed -i "s|<FileVersion>[^<]*</FileVersion>|<FileVersion>$NEW_VERSION</FileVersion>|g" Reqnroll.ScenarioCall.Generator/Reqnroll.ScenarioCall.Generator.csproj

      - name: Restore dependencies
        if: steps.check_changes.outputs.relevant == 'true'
        run: dotnet restore

      - name: Build solution
        if: steps.check_changes.outputs.relevant == 'true'
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        if: steps.check_changes.outputs.relevant == 'true'
        run: dotnet test --configuration Release --no-build --verbosity normal

      - name: Create NuGet package
        if: steps.check_changes.outputs.relevant == 'true'
        run: dotnet pack --configuration Release --no-build --output ./artifacts

      - name: Commit version bump
        if: steps.check_changes.outputs.relevant == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Reqnroll.ScenarioCall.Generator/Reqnroll.ScenarioCall.Generator.csproj
          git commit -m "Bump version to ${{ steps.new_version.outputs.version }}" || exit 0
          git push

      - name: Create Release
        if: steps.check_changes.outputs.relevant == 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          gh release create "v$NEW_VERSION" \
            --title "Release v$NEW_VERSION" \
            --notes "Auto-generated release for version $NEW_VERSION

          This release was automatically created from the latest commit to the main branch.
          
          Changes in this release will be documented in the [CHANGELOG.md](https://github.com/jgerits/Reqnroll.ScenarioCall.Generator/blob/main/CHANGELOG.md)." \
            ./artifacts/*.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NuGet
        if: steps.check_changes.outputs.relevant == 'true'
        run: |
          dotnet nuget push ./artifacts/*.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
